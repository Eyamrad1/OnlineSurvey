{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/question.service\";\nimport * as i2 from \"../../service/option.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../components/sidebar/sidebar.component\";\nimport * as i7 from \"../../components/navbars/admin-navbar/admin-navbar.component\";\nfunction AddQuestionComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Question text is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddQuestionComponent_div_9_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Option text is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddQuestionComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9)(1, \"div\")(2, \"label\", 10);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"input\", 11);\n    i0.ɵɵtemplate(5, AddQuestionComponent_div_9_div_5_Template, 2, 0, \"div\", 4);\n    i0.ɵɵelementStart(6, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function AddQuestionComponent_div_9_Template_button_click_6_listener() {\n      const i_r2 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeOption(i_r2));\n    });\n    i0.ɵɵtext(7, \"Remove Option\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"for\", \"optionText-\", i_r2, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Option \", i_r2 + 1, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate1(\"id\", \"optionText-\", i_r2, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", option_r4.get(\"optionText\").invalid && option_r4.get(\"optionText\"));\n  }\n}\nexport let AddQuestionComponent = /*#__PURE__*/(() => {\n  class AddQuestionComponent {\n    constructor(questionService, optionService, fb, route, router) {\n      this.questionService = questionService;\n      this.optionService = optionService;\n      this.fb = fb;\n      this.route = route;\n      this.router = router;\n      this.route.paramMap.subscribe(params => {\n        this.idSondage = +params.get('id');\n      });\n      this.questionForm = this.fb.group({\n        text: ['', Validators.required],\n        options: this.fb.array([this.createOption()])\n      });\n    }\n    get options() {\n      return this.questionForm.get('options');\n    }\n    createOption() {\n      return this.fb.group({\n        optionText: ['', Validators.required]\n      });\n    }\n    addOption() {\n      this.options.push(this.createOption());\n    }\n    removeOption(index) {\n      this.options.removeAt(index);\n    }\n    AddQuestion() {\n      if (this.questionForm.valid) {\n        const question = {\n          idQuestion: 0,\n          text: this.questionForm.value.text,\n          options: []\n        };\n        this.questionService.addQuestionAndAssignToSondage(question, this.idSondage).subscribe({\n          next: savedQuestion => {\n            console.log('Full saved question object:', savedQuestion);\n            console.log('Question added successfully with ID:', savedQuestion.idQuestion);\n            if (!savedQuestion.idQuestion) {\n              console.error('Error: savedQuestion.idQuestion is undefined');\n              return;\n            }\n            const options = this.questionForm.value.options.map(opt => ({\n              texte: opt.optionText,\n              question: {\n                idQuestion: savedQuestion.idQuestion\n              }\n            }));\n            this.optionService.addOption(options, savedQuestion.idQuestion).subscribe({\n              next: () => {\n                console.log('Options added successfully');\n                this.router.navigate(['/QuestionTable']);\n              },\n              error: err => {\n                console.error('Error adding options', err);\n              }\n            });\n          },\n          error: err => {\n            console.error('Error adding question', err);\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AddQuestionComponent_Factory(t) {\n      return new (t || AddQuestionComponent)(i0.ɵɵdirectiveInject(i1.QuestionService), i0.ɵɵdirectiveInject(i2.OptionService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddQuestionComponent,\n      selectors: [[\"app-add-question\"]],\n      decls: 14,\n      vars: 4,\n      consts: [[1, \"sidebar\"], [3, \"ngSubmit\", \"formGroup\"], [\"for\", \"text\"], [\"id\", \"text\", \"formControlName\", \"text\", \"type\", \"text\"], [4, \"ngIf\"], [\"formArrayName\", \"options\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"submit\", 3, \"disabled\"], [3, \"formGroupName\"], [3, \"for\"], [\"formControlName\", \"optionText\", \"type\", \"text\", 3, \"id\"]],\n      template: function AddQuestionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-admin-navbar\")(1, \"app-sidebar\", 0);\n          i0.ɵɵelementStart(2, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function AddQuestionComponent_Template_form_ngSubmit_2_listener() {\n            return ctx.AddQuestion();\n          });\n          i0.ɵɵelementStart(3, \"div\")(4, \"label\", 2);\n          i0.ɵɵtext(5, \"Question Text\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"input\", 3);\n          i0.ɵɵtemplate(7, AddQuestionComponent_div_7_Template, 2, 0, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 5);\n          i0.ɵɵtemplate(9, AddQuestionComponent_div_9_Template, 8, 7, \"div\", 6);\n          i0.ɵɵelementStart(10, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function AddQuestionComponent_Template_button_click_10_listener() {\n            return ctx.addOption();\n          });\n          i0.ɵɵtext(11, \"Add Option\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"button\", 8);\n          i0.ɵɵtext(13, \"Add Question\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.questionForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.questionForm.controls[\"text\"].invalid && ctx.questionForm.controls[\"text\"]);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.options.controls);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"disabled\", ctx.questionForm.invalid);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i3.FormArrayName, i6.SidebarComponent, i7.AdminNavbarComponent]\n    });\n  }\n  return AddQuestionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}