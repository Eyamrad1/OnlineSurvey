{"ast":null,"code":"import Chart from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../service/sondage.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CardBarChartComponent_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const survey_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", survey_r1.idSondage);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", survey_r1.title, \" \");\n  }\n}\nexport let CardBarChartComponent = /*#__PURE__*/(() => {\n  class CardBarChartComponent {\n    constructor(sondageService) {\n      this.sondageService = sondageService;\n      this.surveys = [];\n      this.selectedSurveyId = null;\n    }\n    ngOnInit() {\n      this.fetchSurveys();\n    }\n    fetchSurveys() {\n      this.sondageService.getAllSondages().subscribe(surveys => {\n        this.surveys = surveys;\n        if (this.surveys.length > 0) {\n          this.selectedSurveyId = this.surveys[0].idSondage;\n          this.generateChart(this.selectedSurveyId);\n        }\n      });\n    }\n    onSurveyChange() {\n      if (this.selectedSurveyId) {\n        this.generateChart(this.selectedSurveyId);\n      }\n    }\n    generateChart(idSondage) {\n      this.sondageService.getSurveyStatistics(idSondage).subscribe(statistics => {\n        const labels = Object.keys(statistics);\n        const data = labels.map(label => statistics[label].totalResponses);\n        let config = {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Survey Responses',\n              backgroundColor: '#ed64a6',\n              borderColor: '#ed64a6',\n              data: data,\n              fill: false,\n              barThickness: 8\n            }]\n          },\n          options: {\n            maintainAspectRatio: false,\n            responsive: true,\n            tooltips: {\n              mode: 'index',\n              intersect: false\n            },\n            hover: {\n              mode: 'nearest',\n              intersect: true\n            },\n            legend: {\n              labels: {\n                fontColor: 'rgba(0,0,0,.4)'\n              },\n              align: 'end',\n              position: 'bottom'\n            },\n            scales: {\n              xAxes: [{\n                display: false,\n                gridLines: {\n                  borderDash: [2],\n                  color: 'rgba(33, 37, 41, 0.3)',\n                  zeroLineColor: 'rgba(33, 37, 41, 0.3)'\n                }\n              }],\n              yAxes: [{\n                display: true,\n                gridLines: {\n                  borderDash: [2],\n                  color: 'rgba(33, 37, 41, 0.2)',\n                  zeroLineColor: 'rgba(33, 37, 41, 0.15)'\n                }\n              }]\n            }\n          }\n        };\n        let ctx = document.getElementById('bar-chart');\n        ctx = ctx.getContext('2d');\n        new Chart(ctx, config);\n      });\n    }\n    static #_ = this.ɵfac = function CardBarChartComponent_Factory(t) {\n      return new (t || CardBarChartComponent)(i0.ɵɵdirectiveInject(i1.SondageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CardBarChartComponent,\n      selectors: [[\"app-card-bar-chart\"]],\n      decls: 14,\n      vars: 2,\n      consts: [[1, \"relative\", \"flex\", \"flex-col\", \"min-w-0\", \"break-words\", \"bg-white\", \"w-full\", \"mb-6\", \"shadow-lg\", \"rounded\"], [1, \"rounded-t\", \"mb-0\", \"px-4\", \"py-3\", \"bg-transparent\"], [1, \"flex\", \"flex-wrap\", \"items-center\"], [1, \"relative\", \"w-full\", \"max-w-full\", \"flex-grow\", \"flex-1\"], [1, \"uppercase\", \"text-blueGray-400\", \"mb-1\", \"text-xs\", \"font-semibold\"], [1, \"text-blueGray-700\", \"text-xl\", \"font-semibold\"], [1, \"w-full\", \"flex\", \"justify-end\"], [3, \"ngModelChange\", \"change\", \"ngModel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"p-4\", \"flex-auto\"], [1, \"relative\", 2, \"height\", \"350px\"], [\"id\", \"bar-chart\"], [3, \"value\"]],\n      template: function CardBarChartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h6\", 4);\n          i0.ɵɵtext(5, \" Performance \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"h2\", 5);\n          i0.ɵɵtext(7, \"Survey Statistics\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 6)(9, \"select\", 7);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function CardBarChartComponent_Template_select_ngModelChange_9_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.selectedSurveyId, $event) || (ctx.selectedSurveyId = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"change\", function CardBarChartComponent_Template_select_change_9_listener() {\n            return ctx.onSurveyChange();\n          });\n          i0.ɵɵtemplate(10, CardBarChartComponent_option_10_Template, 2, 2, \"option\", 8);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(11, \"div\", 9)(12, \"div\", 10);\n          i0.ɵɵelement(13, \"canvas\", 11);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.selectedSurveyId);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.surveys);\n        }\n      },\n      dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n      encapsulation: 2\n    });\n  }\n  return CardBarChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}