{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/question.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../components/sidebar/sidebar.component\";\nimport * as i6 from \"../../components/navbars/admin-navbar/admin-navbar.component\";\nfunction QuestionTableComponent_div_6_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", option_r4.texte, \" \");\n  }\n}\nfunction QuestionTableComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9)(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function QuestionTableComponent_div_6_Template_button_click_4_listener() {\n      const question_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.confirmDelete(question_r2));\n    });\n    i0.ɵɵtext(5, \"Delete\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 11);\n    i0.ɵɵtemplate(7, QuestionTableComponent_div_6_div_7_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"hr\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const question_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(question_r2.text);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", question_r2.options);\n  }\n}\nexport let QuestionTableComponent = /*#__PURE__*/(() => {\n  class QuestionTableComponent {\n    constructor(questionService, snackBar, router) {\n      this.questionService = questionService;\n      this.snackBar = snackBar;\n      this.router = router;\n      this.questions = [];\n    }\n    ngOnInit() {\n      this.getAllQuestionsWithOptions();\n    }\n    getAllQuestionsWithOptions() {\n      this.questionService.getAllQuestionsWithOptions().subscribe({\n        next: questions => {\n          this.questions = questions;\n          console.log('Questions with options:', this.questions);\n        },\n        error: err => {\n          console.error('Error fetching questions', err);\n        }\n      });\n    }\n    confirmDelete(question) {\n      if (confirm('Are you sure you want to delete this question?')) {\n        this.deleteQuestion(question);\n      }\n    }\n    deleteQuestion(question) {\n      if (question && question.idQuestion) {\n        this.questionService.deleteQuestionById(question.idQuestion).subscribe(() => {\n          this.getAllQuestionsWithOptions();\n          this.snackBar.open('Question deleted successfully!', 'Close', {\n            duration: 10000\n          });\n        }, error => {\n          console.error('Error deleting question', error);\n        });\n      }\n    }\n    goToAddQuestion() {\n      this.router.navigate(['/addQuestion']);\n    }\n    static #_ = this.ɵfac = function QuestionTableComponent_Factory(t) {\n      return new (t || QuestionTableComponent)(i0.ɵɵdirectiveInject(i1.QuestionService), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: QuestionTableComponent,\n      selectors: [[\"app-question-table\"]],\n      decls: 10,\n      vars: 1,\n      consts: [[1, \"page-layout\"], [1, \"sidebar\"], [1, \"main-content\"], [1, \"container\", \"mx-auto\", \"px-4\", \"h-full\", \"flex\", \"items-center\", \"justify-center\"], [1, \"w-full\", \"lg:w-6/12\", \"px-4\"], [\"class\", \"question-container\", 4, \"ngFor\", \"ngForOf\"], [1, \"add-question-button\"], [3, \"click\"], [1, \"question-container\"], [1, \"question-header\"], [1, \"delete-button\", 3, \"click\"], [1, \"question-body\"], [\"class\", \"option\", 4, \"ngFor\", \"ngForOf\"], [1, \"separator\"], [1, \"option\"]],\n      template: function QuestionTableComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-admin-navbar\");\n          i0.ɵɵelementStart(1, \"div\", 0);\n          i0.ɵɵelement(2, \"app-sidebar\", 1);\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4);\n          i0.ɵɵtemplate(6, QuestionTableComponent_div_6_Template, 9, 2, \"div\", 5);\n          i0.ɵɵelementStart(7, \"div\", 6)(8, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function QuestionTableComponent_Template_button_click_8_listener() {\n            return ctx.goToAddQuestion();\n          });\n          i0.ɵɵtext(9, \"+\");\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.questions);\n        }\n      },\n      dependencies: [i4.NgForOf, i5.SidebarComponent, i6.AdminNavbarComponent],\n      styles: [\".question-container[_ngcontent-%COMP%]{background-color:#fff;border:1px solid #cbd5e0;border-radius:8px;padding:16px;margin-bottom:16px;box-shadow:0 2px 4px #0000001a}.question-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}.question-header[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:1.25rem;font-weight:500;color:#2d3748}.delete-button[_ngcontent-%COMP%]{background-color:#e53e3e;color:#fff;font-size:.875rem;font-weight:500;text-transform:uppercase;border:none;border-radius:.375rem;padding:8px 16px;cursor:pointer;transition:all .3s ease;display:flex;align-items:center;justify-content:center}.delete-button[_ngcontent-%COMP%]:hover{background-color:#c53030;transform:scale(1.05)}.delete-button[_ngcontent-%COMP%]:focus{outline:none;box-shadow:0 0 0 2px #e53e3e80}.question-body[_ngcontent-%COMP%]   .option[_ngcontent-%COMP%]{font-size:1rem;color:#4a5568;margin-bottom:4px}.separator[_ngcontent-%COMP%]{margin:16px 0;border:0;height:1px;background:#e2e8f0}.add-question-button[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;margin-top:16px}.add-question-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:#48bb78;color:#fff;font-size:1.25rem;font-weight:500;text-transform:uppercase;border:none;border-radius:50%;padding:16px;cursor:pointer;transition:all .3s ease}.add-question-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#38a169;transform:scale(1.1)}.add-question-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:focus{outline:none;box-shadow:0 0 0 2px #48bb7880}\"]\n    });\n  }\n  return QuestionTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}