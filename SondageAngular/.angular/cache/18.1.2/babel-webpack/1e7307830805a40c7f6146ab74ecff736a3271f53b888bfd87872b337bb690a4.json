{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet SondageDetailsComponent = class SondageDetailsComponent {\n  constructor(questionService, sondageService, reponseService, router, route) {\n    this.questionService = questionService;\n    this.sondageService = sondageService;\n    this.reponseService = reponseService;\n    this.router = router;\n    this.route = route;\n    this.questions = [];\n    this.idSondage = 0;\n    this.reponse = {\n      idReponse: 0,\n      user: {},\n      question: {},\n      option: {}\n    }; // Initialize with a valid Reponse object\n  }\n  ngOnInit() {\n    this.idSondage = Number(this.route.snapshot.paramMap.get('idSondage'));\n    if (this.idSondage) {\n      this.getSondageById(this.idSondage);\n      this.getAllQuestionsWithOptions(this.idSondage);\n    } else {\n      console.error('No idSondage provided');\n    }\n  }\n  getSondageById(idSondage) {\n    this.sondageService.findSondageById(idSondage).subscribe({\n      next: sondage => {\n        this.sondage = sondage;\n        console.log('Sondage:', this.sondage);\n      },\n      error: err => {\n        console.error('Error fetching sondage', err);\n      }\n    });\n  }\n  getAllQuestionsWithOptions(idSondage) {\n    this.questionService.getAllQuestionsWithOptions(idSondage).subscribe({\n      next: questions => {\n        this.questions = questions;\n        if (this.sondage) {\n          this.sondage.questions = this.questions; // Populate sondage with questions\n        } else {\n          this.sondage = {\n            idSondage: this.idSondage,\n            questions\n          };\n        }\n        console.log('Questions with options:', this.questions);\n      },\n      error: err => {\n        console.error('Error fetching questions', err);\n      }\n    });\n  }\n  getOptionsForSelectedQuestion(questionId) {\n    const selectedQuestion = this.questions.find(q => q.idQuestion === questionId);\n    return selectedQuestion ? selectedQuestion.options || [] : []; // Handle optional `options` field\n  }\n  submitResponse() {\n    if (this.selectedQuestionId && this.reponse.selectedOption) {\n      this.reponse.question = {\n        idQuestion: this.selectedQuestionId\n      };\n      this.reponse.option = {\n        IdOption: this.reponse.selectedOption\n      };\n      this.reponseService.addResponse(this.selectedQuestionId, this.reponse.selectedOption, this.reponse).subscribe({\n        next: response => {\n          console.log('Response saved:', response);\n          // Handle success response, maybe navigate or show a message\n        },\n        error: err => {\n          console.error('Error saving response:', err);\n          // Handle error response\n        }\n      });\n    } else {\n      console.error('Question ID or Option ID not selected');\n    }\n  }\n};\nSondageDetailsComponent = __decorate([Component({\n  selector: 'app-sondage-details',\n  templateUrl: './sondage-details.component.html',\n  styleUrls: ['./sondage-details.component.css']\n})], SondageDetailsComponent);\nexport { SondageDetailsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}