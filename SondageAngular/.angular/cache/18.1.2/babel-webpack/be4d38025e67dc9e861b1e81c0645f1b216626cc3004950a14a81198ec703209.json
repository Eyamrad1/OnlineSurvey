{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../service/question.service\";\nimport * as i3 from \"../../service/sondage.service\";\nimport * as i4 from \"../../service/reponse.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/common\";\nfunction SondageDetailsComponent_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"input\", 8);\n    i0.ɵɵlistener(\"change\", function SondageDetailsComponent_div_2_div_4_Template_input_change_1_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const question_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onOptionChange(question_r2.get(\"idQuestion\").value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    const j_r5 = ctx.index;\n    const question_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroupName\", j_r5);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"id\", \"option-\" + option_r4.get(\"IdOption\").value)(\"name\", \"question-\" + question_r2.get(\"idQuestion\").value)(\"value\", option_r4.get(\"IdOption\").value)(\"checked\", ctx_r2.selectedOptions[question_r2.get(\"idQuestion\").value] === option_r4.get(\"IdOption\").value);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"for\", \"option-\" + option_r4.get(\"IdOption\").value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(option_r4.get(\"texte\").value);\n  }\n}\nfunction SondageDetailsComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵtemplate(4, SondageDetailsComponent_div_2_div_4_Template, 4, 7, \"div\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const question_r2 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r6);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r2.get(\"text\").value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", question_r2.get(\"options\").controls);\n  }\n}\nexport let SondageDetailsComponent = /*#__PURE__*/(() => {\n  class SondageDetailsComponent {\n    constructor(fb, questionService, sondageService, reponseService, router, route) {\n      this.fb = fb;\n      this.questionService = questionService;\n      this.sondageService = sondageService;\n      this.reponseService = reponseService;\n      this.router = router;\n      this.route = route;\n      this.idSondage = 0;\n      this.selectedOptions = {}; // Adjusted type to include null\n      this.surveyForm = this.fb.group({\n        questions: this.fb.array([])\n      });\n    }\n    ngOnInit() {\n      this.idSondage = Number(this.route.snapshot.paramMap.get('idSondage'));\n      if (this.idSondage) {\n        this.getSondageById(this.idSondage);\n        this.getAllQuestionsWithOptions(this.idSondage);\n      } else {\n        console.error('No idSondage provided');\n      }\n    }\n    getSondageById(idSondage) {\n      this.sondageService.findSondageById(idSondage).subscribe({\n        next: sondage => {\n          this.sondage = sondage;\n          console.log('Sondage:', this.sondage);\n        },\n        error: err => {\n          console.error('Error fetching sondage', err);\n        }\n      });\n    }\n    getAllQuestionsWithOptions(idSondage) {\n      this.questionService.getAllQuestionsWithOptions(idSondage).subscribe({\n        next: questions => {\n          const questionFGs = questions.map(question => this.fb.group({\n            idQuestion: question.idQuestion,\n            text: question.text,\n            selectedOption: [this.selectedOptions[question.idQuestion] || null],\n            options: this.fb.array(question.options.map(option => this.fb.group({\n              IdOption: option.IdOption,\n              texte: option.texte\n            })))\n          }));\n          const questionFormArray = this.fb.array(questionFGs);\n          this.surveyForm.setControl('questions', questionFormArray);\n          if (this.sondage) {\n            this.sondage.questions = questions;\n          } else {\n            this.sondage = {\n              idSondage: this.idSondage,\n              questions\n            };\n          }\n          // Initialize selectedOptions\n          this.sondage.questions.forEach(q => {\n            if (this.selectedOptions[q.idQuestion] === undefined) {\n              this.selectedOptions[q.idQuestion] = null;\n            }\n          });\n          console.log('Questions with options:', questions);\n        },\n        error: err => {\n          console.error('Error fetching questions', err);\n        }\n      });\n    }\n    onOptionChange(idQuestion, selectedOption) {\n      this.selectedOptions[idQuestion] = +selectedOption; // Convert to number if needed\n    }\n    submitSurvey() {\n      if (this.sondage) {\n        const formValue = this.surveyForm.value;\n        let allQuestionsAnswered = true;\n        formValue.questions.forEach(question => {\n          if (question.selectedOption === null) {\n            allQuestionsAnswered = false;\n            console.error(`Question with id ${question.idQuestion} is not answered. Selected option: ${question.selectedOption}`);\n          }\n        });\n        if (allQuestionsAnswered) {\n          formValue.questions.forEach(question => {\n            const response = {\n              // Add necessary response details if needed\n            };\n            if (question.selectedOption !== null) {\n              this.reponseService.addResponse(question.idQuestion, question.selectedOption, response).subscribe({\n                next: () => {\n                  console.log('Response submitted successfully for question:', question.idQuestion);\n                },\n                error: err => {\n                  console.error('Error submitting response for question:', question.idQuestion, err);\n                }\n              });\n            } else {\n              console.error('Selected option is null for question:', question.idQuestion);\n            }\n          });\n          this.router.navigate(['/Survey']);\n        } else {\n          alert('Please answer all the questions before submitting the survey.');\n        }\n      }\n    }\n    static #_ = this.ɵfac = function SondageDetailsComponent_Factory(t) {\n      return new (t || SondageDetailsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.QuestionService), i0.ɵɵdirectiveInject(i3.SondageService), i0.ɵɵdirectiveInject(i4.ReponseService), i0.ɵɵdirectiveInject(i5.Router), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SondageDetailsComponent,\n      selectors: [[\"app-sondage-details\"]],\n      decls: 5,\n      vars: 2,\n      consts: [[1, \"survey-details\", 3, \"ngSubmit\", \"formGroup\"], [\"formArrayName\", \"questions\"], [\"class\", \"question-container\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"submit-button\"], [1, \"question-container\", 3, \"formGroupName\"], [\"formArrayName\", \"options\", 1, \"options-container\"], [\"class\", \"option\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [1, \"option\", 3, \"formGroupName\"], [\"type\", \"radio\", \"required\", \"\", 3, \"change\", \"id\", \"name\", \"value\", \"checked\"], [3, \"for\"]],\n      template: function SondageDetailsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function SondageDetailsComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.submitSurvey();\n          });\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵtemplate(2, SondageDetailsComponent_div_2_Template, 5, 3, \"div\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"button\", 3);\n          i0.ɵɵtext(4, \"Submit Response\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.surveyForm);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.surveyForm.get(\"questions\"));\n        }\n      },\n      dependencies: [i6.NgForOf, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormGroupName, i1.FormArrayName],\n      styles: [\"input[type=radio][_ngcontent-%COMP%]{display:none}.option[_ngcontent-%COMP%]{position:relative;display:inline-block;margin:10px}.option[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{cursor:pointer;display:inline-block;padding-left:30px;position:relative;font-size:16px}.option[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;left:0;top:50%;width:20px;height:20px;background-color:#fff;border:2px solid #ccc;border-radius:50%;transform:translateY(-50%)}input[type=radio][_ngcontent-%COMP%]:checked + label[_ngcontent-%COMP%]:before{background-color:#2196f3;border-color:#2196f3}input[type=radio][_ngcontent-%COMP%]:checked + label[_ngcontent-%COMP%]:after{content:\\\"\\\";position:absolute;left:8px;top:50%;width:10px;height:10px;background-color:#fff;border-radius:50%;transform:translateY(-50%)}\"]\n    });\n  }\n  return SondageDetailsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}