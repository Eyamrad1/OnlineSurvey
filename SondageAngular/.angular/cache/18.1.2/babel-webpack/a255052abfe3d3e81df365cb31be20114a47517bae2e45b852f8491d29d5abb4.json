{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/question.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction AddQuestionComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Question text is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let AddQuestionComponent = /*#__PURE__*/(() => {\n  class AddQuestionComponent {\n    constructor(questionService, fb, route, router) {\n      this.questionService = questionService;\n      this.fb = fb;\n      this.route = route;\n      this.router = router;\n      this.sondageId = +this.route.snapshot.paramMap.get('id');\n      this.questionForm = this.fb.group({\n        text: ['', Validators.required]\n      });\n    }\n    AddQuestion() {\n      if (this.questionForm.valid) {\n        const question = {\n          IdQuestion: 0,\n          text: this.questionForm.value.text\n        };\n        this.questionService.addQuestionAndAssignToSondage(question, this.sondageId).subscribe({\n          next: () => {\n            console.log('Question added successfully');\n            this.router.navigate(['/QuestionTable']);\n            // Handle success, e.g., navigate to another page or show a success message\n          },\n          error: err => {\n            console.error('Error adding question', err);\n            // Handle error, e.g., show an error message\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AddQuestionComponent_Factory(t) {\n      return new (t || AddQuestionComponent)(i0.ɵɵdirectiveInject(i1.QuestionService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddQuestionComponent,\n      selectors: [[\"app-add-question\"]],\n      decls: 8,\n      vars: 3,\n      consts: [[3, \"ngSubmit\", \"formGroup\"], [\"for\", \"text\"], [\"id\", \"text\", \"formControlName\", \"text\", \"type\", \"text\"], [4, \"ngIf\"], [\"type\", \"submit\", 3, \"disabled\"]],\n      template: function AddQuestionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function AddQuestionComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.AddQuestion();\n          });\n          i0.ɵɵelementStart(1, \"div\")(2, \"label\", 1);\n          i0.ɵɵtext(3, \"Question Text\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"input\", 2);\n          i0.ɵɵtemplate(5, AddQuestionComponent_div_5_Template, 2, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 4);\n          i0.ɵɵtext(7, \"Add Question\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.questionForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.questionForm.controls[\"text\"].invalid && ctx.questionForm.controls[\"text\"].touched);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.questionForm.invalid);\n        }\n      },\n      dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName]\n    });\n  }\n  return AddQuestionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}