{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet SondageFrontComponent = class SondageFrontComponent {\n  constructor(sondageService, router) {\n    this.sondageService = sondageService;\n    this.router = router;\n    this.surveys = [];\n    this.currentPage = 1;\n    this.itemsPerPage = 8;\n    this.searchResults = [];\n    this.searchTerm = ''; // Added searchTerm variable\n  }\n  ngOnInit() {\n    this.loadSurveys();\n  }\n  get paginatedSurveys() {\n    const source = this.searchResults.length ? this.searchResults : this.surveys;\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    return source.slice(startIndex, startIndex + this.itemsPerPage);\n  }\n  viewSurveyDetails(idSondage) {\n    this.router.navigate(['/SurveyDetails', idSondage]);\n  }\n  get totalPages() {\n    return Math.ceil(this.surveys.length / this.itemsPerPage);\n  }\n  changePage(page) {\n    if (page >= 1 && page <= this.totalPages) {\n      this.currentPage = page;\n    }\n  }\n  onSearch(title) {\n    if (title.trim()) {\n      this.sondageService.searchSondagesByTitle(title).subscribe(results => {\n        this.searchResults = results;\n        this.currentPage = 1; // Reset to the first page after a new search\n      }, error => {\n        console.error('Search error:', error);\n      });\n    } else {\n      this.searchResults = [];\n      this.currentPage = 1; // Reset to the first page if the search is cleared\n    }\n  }\n  loadSurveys() {\n    this.sondageService.getAllSondages().subscribe(data => {\n      this.surveys = data;\n    }, error => {\n      console.error('Error loading surveys', error);\n    });\n  }\n};\nSondageFrontComponent = __decorate([Component({\n  selector: 'app-sondage-front',\n  templateUrl: './sondage-front.component.html',\n  styleUrls: ['./sondage-front.component.css'] // Corrected typo here\n})], SondageFrontComponent);\nexport { SondageFrontComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}