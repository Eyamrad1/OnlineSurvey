{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { forkJoin } from 'rxjs';\nlet SondageDetailsComponent = class SondageDetailsComponent {\n  constructor(questionService, sondageService, u, reponseService, router, route) {\n    this.questionService = questionService;\n    this.sondageService = sondageService;\n    this.u = u;\n    this.reponseService = reponseService;\n    this.router = router;\n    this.route = route;\n    this.questions = [];\n    this.idSondage = 0;\n    this.selectedOptions = [];\n  }\n  ngOnInit() {\n    this.userService.getUserId().subscribe(userId => this.currentUserId = userId);\n    this.idSondage = Number(this.route.snapshot.paramMap.get('idSondage'));\n    if (this.idSondage) {\n      this.getSondageById(this.idSondage);\n      this.getAllQuestionsWithOptions(this.idSondage);\n    } else {\n      console.error('No idSondage provided');\n    }\n  }\n  getSondageById(idSondage) {\n    this.sondageService.findSondageById(idSondage).subscribe({\n      next: sondage => {\n        this.sondage = sondage;\n        console.log('Sondage:', this.sondage);\n      },\n      error: err => {\n        console.error('Error fetching sondage', err);\n      }\n    });\n  }\n  getAllQuestionsWithOptions(idSondage) {\n    this.questionService.getAllQuestionsWithOptions(idSondage).subscribe({\n      next: questions => {\n        this.questions = questions;\n        this.selectedOptions = new Array(questions.length).fill(undefined);\n        if (this.sondage) {\n          this.sondage.questions = this.questions;\n        } else {\n          this.sondage = {\n            idSondage: this.idSondage,\n            questions\n          };\n        }\n        console.log('Questions with options:', this.questions);\n      },\n      error: err => {\n        console.error('Error fetching questions', err);\n      }\n    });\n  }\n  getOptionsForSelectedQuestion(idQuestion) {\n    const selectedQuestion = this.questions.find(q => q.idQuestion === idQuestion);\n    if (!selectedQuestion || !selectedQuestion.options) {\n      console.error(`No options found for question with ID: ${idQuestion}`);\n      return [];\n    }\n    console.log(`Options for Question ID ${idQuestion}:`, selectedQuestion.options);\n    return selectedQuestion.options;\n  }\n  onOptionChange(idQuestion, IdOption) {\n    console.log(`Question ID: ${idQuestion}, Selected Option ID: ${IdOption}`);\n    const index = this.questions.findIndex(q => q.idQuestion === idQuestion);\n    if (index !== -1) {\n      this.selectedOptions[index] = IdOption;\n    }\n    console.log('Selected Options:', this.selectedOptions);\n  }\n  submitResponse() {\n    console.log('Final selected options before submission:', this.selectedOptions);\n    if (this.selectedOptions.some(option => option === undefined)) {\n      console.error('All options must be selected before submitting.');\n      alert('Please select an option for each question before submitting.');\n      return;\n    }\n    const responses = this.questions.map((question, index) => ({\n      question: {\n        idQuestion: question.idQuestion\n      },\n      option: {\n        IdOption: this.selectedOptions[index]\n      }\n    }));\n    // Collect all responses and submit them\n    const responseObservables = responses.map(response => this.reponseService.addResponse(response.question.idQuestion, response.option.IdOption, response));\n    // Use forkJoin to wait for all responses to complete\n    forkJoin(responseObservables).subscribe({\n      next: res => {\n        console.log('All responses saved:', res);\n        // Navigate to the Survey page after all responses have been saved\n        this.router.navigate(['/Survey']);\n      },\n      error: err => console.error('Error saving responses:', err)\n    });\n  }\n};\nSondageDetailsComponent = __decorate([Component({\n  selector: 'app-sondage-details',\n  templateUrl: './sondage-details.component.html',\n  styleUrls: ['./sondage-details.component.css']\n})], SondageDetailsComponent);\nexport { SondageDetailsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}