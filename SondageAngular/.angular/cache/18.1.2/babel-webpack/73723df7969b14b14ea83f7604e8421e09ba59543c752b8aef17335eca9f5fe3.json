{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet SondageDetailsComponent = class SondageDetailsComponent {\n  constructor(fb, questionService, sondageService, reponseService, router, route) {\n    this.fb = fb;\n    this.questionService = questionService;\n    this.sondageService = sondageService;\n    this.reponseService = reponseService;\n    this.router = router;\n    this.route = route;\n    this.idSondage = 0;\n    this.selectedOptions = {}; // Adjusted type to include null\n    this.surveyForm = this.fb.group({\n      questions: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.idSondage = Number(this.route.snapshot.paramMap.get('idSondage'));\n    if (this.idSondage) {\n      this.getSondageById(this.idSondage);\n      this.getAllQuestionsWithOptions(this.idSondage);\n    } else {\n      console.error('No idSondage provided');\n    }\n  }\n  getSondageById(idSondage) {\n    this.sondageService.findSondageById(idSondage).subscribe({\n      next: sondage => {\n        this.sondage = sondage;\n        console.log('Sondage:', this.sondage);\n      },\n      error: err => {\n        console.error('Error fetching sondage', err);\n      }\n    });\n  }\n  getAllQuestionsWithOptions(idSondage) {\n    this.questionService.getAllQuestionsWithOptions(idSondage).subscribe({\n      next: questions => {\n        const questionFGs = questions.map(question => this.fb.group({\n          idQuestion: question.idQuestion,\n          text: question.text,\n          selectedOption: [this.selectedOptions[question.idQuestion] || null],\n          options: this.fb.array(question.options.map(option => this.fb.group({\n            IdOption: option.IdOption,\n            texte: option.texte\n          })))\n        }));\n        const questionFormArray = this.fb.array(questionFGs);\n        this.surveyForm.setControl('questions', questionFormArray);\n        if (this.sondage) {\n          this.sondage.questions = questions;\n        } else {\n          this.sondage = {\n            idSondage: this.idSondage,\n            questions\n          };\n        }\n        // Initialize selectedOptions\n        this.sondage.questions.forEach(q => {\n          if (this.selectedOptions[q.idQuestion] === undefined) {\n            this.selectedOptions[q.idQuestion] = null;\n          }\n        });\n        console.log('Questions with options:', questions);\n      },\n      error: err => {\n        console.error('Error fetching questions', err);\n      }\n    });\n  }\n  onOptionChange(idQuestion, selectedOption) {\n    this.selectedOptions[idQuestion] = +selectedOption; // Convert to number if needed\n  }\n  submitSurvey() {\n    if (this.sondage) {\n      const formValue = this.surveyForm.value;\n      let allQuestionsAnswered = true;\n      formValue.questions.forEach(question => {\n        if (question.selectedOption === null) {\n          allQuestionsAnswered = false;\n          console.error(`Question with id ${question.idQuestion} is not answered. Selected option: ${question.selectedOption}`);\n        }\n      });\n      if (allQuestionsAnswered) {\n        formValue.questions.forEach(question => {\n          const response = {\n            // Add necessary response details if needed\n          };\n          if (question.selectedOption !== null) {\n            this.reponseService.addResponse(question.idQuestion, question.selectedOption, response).subscribe({\n              next: () => {\n                console.log('Response submitted successfully for question:', question.idQuestion);\n              },\n              error: err => {\n                console.error('Error submitting response for question:', question.idQuestion, err);\n              }\n            });\n          } else {\n            console.error('Selected option is null for question:', question.idQuestion);\n          }\n        });\n        this.router.navigate(['/Survey']);\n      } else {\n        alert('Please answer all the questions before submitting the survey.');\n      }\n    }\n  }\n};\nSondageDetailsComponent = __decorate([Component({\n  selector: 'app-sondage-details',\n  templateUrl: './sondage-details.component.html',\n  styleUrls: ['./sondage-details.component.css']\n})], SondageDetailsComponent);\nexport { SondageDetailsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}