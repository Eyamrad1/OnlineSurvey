{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/question.service\";\nimport * as i2 from \"../../service/sondage.service\";\nimport * as i3 from \"../../service/reponse.service\";\nimport * as i4 from \"@angular/router\";\nexport let SondageDetailsComponent = /*#__PURE__*/(() => {\n  class SondageDetailsComponent {\n    constructor(questionService, sondageService, reponseService, router, route) {\n      this.questionService = questionService;\n      this.sondageService = sondageService;\n      this.reponseService = reponseService;\n      this.router = router;\n      this.route = route;\n      this.questions = [];\n      this.idSondage = 0;\n    }\n    ngOnInit() {\n      this.idSondage = Number(this.route.snapshot.paramMap.get('idSondage'));\n      if (this.idSondage) {\n        this.getSondageById(this.idSondage);\n        this.getAllQuestionsWithOptions(this.idSondage);\n      } else {\n        console.error('No idSondage provided');\n      }\n    }\n    getSondageById(idSondage) {\n      this.sondageService.findSondageById(idSondage).subscribe({\n        next: sondage => {\n          this.sondage = sondage;\n          console.log('Sondage:', this.sondage);\n        },\n        error: err => {\n          console.error('Error fetching sondage', err);\n        }\n      });\n    }\n    getAllQuestionsWithOptions(idSondage) {\n      this.questionService.getAllQuestionsWithOptions(idSondage).subscribe({\n        next: questions => {\n          this.questions = questions;\n          if (this.sondage) {\n            this.sondage.questions = this.questions; // Populate sondage with questions\n          } else {\n            this.sondage = {\n              idSondage: this.idSondage,\n              questions\n            };\n          }\n          console.log('Questions with options:', this.questions);\n        },\n        error: err => {\n          console.error('Error fetching questions', err);\n        }\n      });\n    }\n    submitResponse(responseData, IdOption) {\n      this.reponseService.addResponse(responseData, IdOption).subscribe(response => {\n        console.log('Response added successfully:', response);\n      }, error => {\n        console.error('Error adding response:', error);\n      });\n    }\n    static #_ = this.ɵfac = function SondageDetailsComponent_Factory(t) {\n      return new (t || SondageDetailsComponent)(i0.ɵɵdirectiveInject(i1.QuestionService), i0.ɵɵdirectiveInject(i2.SondageService), i0.ɵɵdirectiveInject(i3.ReponseService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SondageDetailsComponent,\n      selectors: [[\"app-sondage-details\"]],\n      decls: 2,\n      vars: 0,\n      template: function SondageDetailsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"sondage-details works!\");\n          i0.ɵɵelementEnd();\n        }\n      }\n    });\n  }\n  return SondageDetailsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}