{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/question.service\";\nimport * as i2 from \"../../service/option.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"../../components/sidebar/sidebar.component\";\nimport * as i8 from \"../../components/navbars/admin-navbar/admin-navbar.component\";\nfunction AddQuestionComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Question text is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddQuestionComponent_div_20_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Option text is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddQuestionComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"label\", 23);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 24);\n    i0.ɵɵtemplate(4, AddQuestionComponent_div_20_div_4_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementStart(5, \"button\", 25);\n    i0.ɵɵlistener(\"click\", function AddQuestionComponent_div_20_Template_button_click_5_listener() {\n      const i_r2 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeOption(i_r2));\n    });\n    i0.ɵɵelementStart(6, \"mat-icon\");\n    i0.ɵɵtext(7, \"remove_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \" Remove Option \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r2);\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate1(\"for\", \"optionText-\", i_r2, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Option \", i_r2 + 1, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate1(\"id\", \"optionText-\", i_r2, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", option_r4.get(\"optionText\").invalid && option_r4.get(\"optionText\"));\n  }\n}\nexport let AddQuestionComponent = /*#__PURE__*/(() => {\n  class AddQuestionComponent {\n    constructor(questionService, optionService, fb, route, router) {\n      this.questionService = questionService;\n      this.optionService = optionService;\n      this.fb = fb;\n      this.route = route;\n      this.router = router;\n      this.route.paramMap.subscribe(params => {\n        this.idSondage = +params.get('id');\n      });\n      this.questionForm = this.fb.group({\n        text: ['', Validators.required],\n        options: this.fb.array([this.createOption()])\n      });\n    }\n    get options() {\n      return this.questionForm.get('options');\n    }\n    createOption() {\n      return this.fb.group({\n        optionText: ['', Validators.required]\n      });\n    }\n    addOption() {\n      this.options.push(this.createOption());\n    }\n    removeOption(index) {\n      this.options.removeAt(index);\n    }\n    AddQuestion() {\n      if (this.questionForm.valid) {\n        const question = {\n          idQuestion: 0,\n          text: this.questionForm.value.text,\n          options: []\n        };\n        this.questionService.addQuestionAndAssignToSondage(question, this.idSondage).subscribe({\n          next: savedQuestion => {\n            console.log('Full saved question object:', savedQuestion);\n            console.log('Question added successfully with ID:', savedQuestion.idQuestion);\n            if (!savedQuestion.idQuestion) {\n              console.error('Error: savedQuestion.idQuestion is undefined');\n              return;\n            }\n            const options = this.questionForm.value.options.map(opt => ({\n              texte: opt.optionText,\n              question: {\n                idQuestion: savedQuestion.idQuestion\n              }\n            }));\n            this.optionService.addOption(options, savedQuestion.idQuestion).subscribe({\n              next: () => {\n                console.log('Options added successfully');\n                this.router.navigate(['/QuestionTable']);\n              },\n              error: err => {\n                console.error('Error adding options', err);\n              }\n            });\n          },\n          error: err => {\n            console.error('Error adding question', err);\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function AddQuestionComponent_Factory(t) {\n      return new (t || AddQuestionComponent)(i0.ɵɵdirectiveInject(i1.QuestionService), i0.ɵɵdirectiveInject(i2.OptionService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddQuestionComponent,\n      selectors: [[\"app-add-question\"]],\n      decls: 30,\n      vars: 4,\n      consts: [[1, \"page-layout\"], [1, \"sidebar\"], [1, \"main-content\"], [1, \"container\", \"mx-auto\", \"px-4\", \"h-full\", \"flex\", \"items-center\", \"justify-center\"], [1, \"w-full\", \"lg:w-6/12\", \"px-4\"], [1, \"relative\", \"flex\", \"flex-col\", \"min-w-0\", \"break-words\", \"w-full\", \"mb-6\", \"shadow-lg\", \"rounded-lg\", \"bg-white\", \"border-0\"], [1, \"rounded-t\", \"mb-0\", \"px-6\", \"py-6\"], [1, \"text-center\", \"mb-3\"], [1, \"text-gray-500\", \"text-sm\", \"font-bold\"], [1, \"mt-6\", \"border-b-1\", \"border-gray-300\"], [1, \"flex-auto\", \"px-4\", \"lg:px-10\", \"py-10\", \"pt-0\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"relative\", \"w-full\", \"mb-3\"], [\"for\", \"text\", 1, \"block\", \"uppercase\", \"text-gray-600\", \"text-xs\", \"font-bold\", \"mb-2\"], [\"type\", \"text\", \"id\", \"text\", \"formControlName\", \"text\", 1, \"form-input\"], [\"class\", \"text-red-500 text-xs mt-1\", 4, \"ngIf\"], [\"formArrayName\", \"options\"], [\"class\", \"relative w-full mb-3\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"submit-button\", 3, \"click\"], [1, \"text-center\", \"mt-6\"], [\"type\", \"submit\", 1, \"submit-button\", 3, \"disabled\"], [1, \"text-red-500\", \"text-xs\", \"mt-1\"], [1, \"relative\", \"w-full\", \"mb-3\", 3, \"formGroupName\"], [1, \"block\", \"uppercase\", \"text-gray-600\", \"text-xs\", \"font-bold\", \"mb-2\", 3, \"for\"], [\"type\", \"text\", \"formControlName\", \"optionText\", 1, \"form-input\", 3, \"id\"], [\"type\", \"button\", 1, \"cancel-button\", 3, \"click\"]],\n      template: function AddQuestionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-admin-navbar\");\n          i0.ɵɵelementStart(1, \"div\", 0);\n          i0.ɵɵelement(2, \"app-sidebar\", 1);\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"div\", 7)(9, \"h6\", 8);\n          i0.ɵɵtext(10, \"Add Question\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(11, \"hr\", 9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 10)(13, \"form\", 11);\n          i0.ɵɵlistener(\"ngSubmit\", function AddQuestionComponent_Template_form_ngSubmit_13_listener() {\n            return ctx.AddQuestion();\n          });\n          i0.ɵɵelementStart(14, \"div\", 12)(15, \"label\", 13);\n          i0.ɵɵtext(16, \"Question Text\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 14);\n          i0.ɵɵtemplate(18, AddQuestionComponent_div_18_Template, 2, 0, \"div\", 15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 16);\n          i0.ɵɵtemplate(20, AddQuestionComponent_div_20_Template, 9, 7, \"div\", 17);\n          i0.ɵɵelementStart(21, \"button\", 18);\n          i0.ɵɵlistener(\"click\", function AddQuestionComponent_Template_button_click_21_listener() {\n            return ctx.addOption();\n          });\n          i0.ɵɵelementStart(22, \"mat-icon\");\n          i0.ɵɵtext(23, \"add_circle\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(24, \" Add Option \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"div\", 19)(26, \"button\", 20)(27, \"mat-icon\");\n          i0.ɵɵtext(28, \"save\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(29, \" Add Question \");\n          i0.ɵɵelementEnd()()()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"formGroup\", ctx.questionForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.questionForm.controls[\"text\"].invalid && ctx.questionForm.controls[\"text\"]);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.options.controls);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"disabled\", ctx.questionForm.invalid);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i3.FormArrayName, i6.MatIcon, i7.SidebarComponent, i8.AdminNavbarComponent]\n    });\n  }\n  return AddQuestionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}