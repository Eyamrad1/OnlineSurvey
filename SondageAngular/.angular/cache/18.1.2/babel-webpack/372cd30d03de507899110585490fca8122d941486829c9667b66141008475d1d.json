{"ast":null,"code":"import Chart from 'chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../service/sondage.service\";\nexport let CardLineChartComponent = /*#__PURE__*/(() => {\n  class CardLineChartComponent {\n    constructor(sondageService) {\n      this.sondageService = sondageService;\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      this.sondageService.getSurveyStatisticsLine().subscribe(data => {\n        this.renderChart(data);\n      }, error => {\n        console.error('Error fetching survey statistics', error);\n      });\n    }\n    renderChart(data) {\n      const labels = this.generateLabels(); // Generate labels for the chart (e.g., months)\n      const datasets = [{\n        label: 'Total Responses',\n        backgroundColor: '#4c51bf',\n        borderColor: '#4c51bf',\n        data: this.getTotalResponses(data),\n        fill: false\n      }, {\n        label: 'Average Completion Rate',\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        data: this.getAverageCompletionRates(data),\n        fill: false\n      }];\n      const config = {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: datasets\n        },\n        options: {\n          maintainAspectRatio: false,\n          responsive: true,\n          title: {\n            display: false,\n            text: 'Survey Completion Rates',\n            fontColor: 'white'\n          },\n          legend: {\n            labels: {\n              fontColor: 'white'\n            },\n            align: 'end',\n            position: 'bottom'\n          },\n          tooltips: {\n            mode: 'index',\n            intersect: false\n          },\n          hover: {\n            mode: 'nearest',\n            intersect: true\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                fontColor: 'rgba(255,255,255,.7)'\n              },\n              display: true,\n              scaleLabel: {\n                display: false,\n                labelString: 'Month',\n                fontColor: 'white'\n              },\n              gridLines: {\n                display: false,\n                borderDash: [2],\n                borderDashOffset: [2],\n                color: 'rgba(33, 37, 41, 0.3)',\n                zeroLineColor: 'rgba(0, 0, 0, 0)',\n                zeroLineBorderDash: [2],\n                zeroLineBorderDashOffset: [2]\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                fontColor: 'rgba(255,255,255,.7)'\n              },\n              display: true,\n              scaleLabel: {\n                display: false,\n                labelString: 'Value',\n                fontColor: 'white'\n              },\n              gridLines: {\n                borderDash: [3],\n                borderDashOffset: [3],\n                drawBorder: false,\n                color: 'rgba(255, 255, 255, 0.15)',\n                zeroLineColor: 'rgba(33, 37, 41, 0)',\n                zeroLineBorderDash: [2],\n                zeroLineBorderDashOffset: [2]\n              }\n            }]\n          }\n        }\n      };\n      let ctx = document.getElementById('line-chart');\n      ctx = ctx.getContext('2d');\n      new Chart(ctx, config);\n    }\n    generateLabels() {\n      // This method generates labels, e.g., [\"January\", \"February\", ...]\n      return ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n    }\n    getTotalResponses(data) {\n      // Extract and return total responses per month or survey from the data\n      return [65, 78, 66, 44, 56, 67, 75]; // Example data, replace with actual extraction logic\n    }\n    getAverageCompletionRates(data) {\n      // Extract and return average completion rates per month or survey from the data\n      return [40, 68, 86, 74, 56, 60, 87]; // Example data, replace with actual extraction logic\n    }\n    static #_ = this.ɵfac = function CardLineChartComponent_Factory(t) {\n      return new (t || CardLineChartComponent)(i0.ɵɵdirectiveInject(i1.SondageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CardLineChartComponent,\n      selectors: [[\"app-card-line-chart\"]],\n      decls: 11,\n      vars: 0,\n      consts: [[1, \"relative\", \"flex\", \"flex-col\", \"min-w-0\", \"break-words\", \"w-full\", \"mb-6\", \"shadow-lg\", \"rounded\", \"bg-blueGray-700\"], [1, \"rounded-t\", \"mb-0\", \"px-4\", \"py-3\", \"bg-transparent\"], [1, \"flex\", \"flex-wrap\", \"items-center\"], [1, \"relative\", \"w-full\", \"max-w-full\", \"flex-grow\", \"flex-1\"], [1, \"uppercase\", \"text-blueGray-100\", \"mb-1\", \"text-xs\", \"font-semibold\"], [1, \"text-white\", \"text-xl\", \"font-semibold\"], [1, \"p-4\", \"flex-auto\"], [1, \"relative\", 2, \"height\", \"350px\"], [\"id\", \"line-chart\"]],\n      template: function CardLineChartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h6\", 4);\n          i0.ɵɵtext(5, \" Overview \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"h2\", 5);\n          i0.ɵɵtext(7, \"Survey Completion Rates\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(8, \"div\", 6)(9, \"div\", 7);\n          i0.ɵɵelement(10, \"canvas\", 8);\n          i0.ɵɵelementEnd()()();\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return CardLineChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}