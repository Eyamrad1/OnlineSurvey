{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/question.service\";\nimport * as i2 from \"../../service/sondage.service\";\nimport * as i3 from \"../../service/reponse.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../components/footers/footer/footer.component\";\nimport * as i8 from \"../../components/navbars/auth-navbar/auth-navbar.component\";\nfunction SondageDetailsComponent_div_4_div_4_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 8);\n    i0.ɵɵlistener(\"change\", function SondageDetailsComponent_div_4_div_4_div_3_Template_input_change_1_listener() {\n      const option_r4 = i0.ɵɵrestoreView(_r3).$implicit;\n      const question_r5 = i0.ɵɵnextContext().$implicit;\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onOptionChange(question_r5.idQuestion, option_r4.idOption));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const option_r4 = ctx.$implicit;\n    const i_r6 = i0.ɵɵnextContext().index;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"id\", option_r4.idOption)(\"name\", \"option\" + i_r6)(\"value\", option_r4.idOption);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"for\", option_r4.idOption);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(option_r4.texte);\n  }\n}\nfunction SondageDetailsComponent_div_4_div_4_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 10);\n  }\n}\nfunction SondageDetailsComponent_div_4_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, SondageDetailsComponent_div_4_div_4_div_3_Template, 4, 5, \"div\", 5)(4, SondageDetailsComponent_div_4_div_4_div_4_Template, 1, 0, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const question_r5 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r5.text);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getOptionsForSelectedQuestion(question_r5.idQuestion));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", i_r6 < ctx_r1.questions.length - 1);\n  }\n}\nfunction SondageDetailsComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"form\", 4);\n    i0.ɵɵlistener(\"ngSubmit\", function SondageDetailsComponent_div_4_Template_form_ngSubmit_3_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.submitResponse());\n    });\n    i0.ɵɵtemplate(4, SondageDetailsComponent_div_4_div_4_Template, 5, 3, \"div\", 5);\n    i0.ɵɵelementStart(5, \"button\", 6);\n    i0.ɵɵtext(6, \"Submit Response\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.sondage.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.questions);\n  }\n}\nexport let SondageDetailsComponent = /*#__PURE__*/(() => {\n  class SondageDetailsComponent {\n    constructor(questionService, sondageService, reponseService, router, route) {\n      this.questionService = questionService;\n      this.sondageService = sondageService;\n      this.reponseService = reponseService;\n      this.router = router;\n      this.route = route;\n      this.questions = [];\n      this.idSondage = 0;\n      this.selectedOptions = [];\n    }\n    ngOnInit() {\n      this.idSondage = Number(this.route.snapshot.paramMap.get('idSondage'));\n      if (this.idSondage) {\n        this.getSondageById(this.idSondage);\n        this.getAllQuestionsWithOptions(this.idSondage);\n      } else {\n        console.error('No idSondage provided');\n      }\n    }\n    getSondageById(idSondage) {\n      this.sondageService.findSondageById(idSondage).subscribe({\n        next: sondage => {\n          this.sondage = sondage;\n          console.log('Sondage:', this.sondage);\n        },\n        error: err => {\n          console.error('Error fetching sondage', err);\n        }\n      });\n    }\n    getAllQuestionsWithOptions(idSondage) {\n      this.questionService.getAllQuestionsWithOptions(idSondage).subscribe({\n        next: questions => {\n          this.questions = questions;\n          this.selectedOptions = new Array(questions.length).fill(undefined);\n          if (this.sondage) {\n            this.sondage.questions = this.questions;\n          } else {\n            this.sondage = {\n              idSondage: this.idSondage,\n              questions\n            };\n          }\n          console.log('Questions with options:', this.questions);\n        },\n        error: err => {\n          console.error('Error fetching questions', err);\n        }\n      });\n    }\n    getOptionsForSelectedQuestion(idQuestion) {\n      const selectedQuestion = this.questions.find(q => q.idQuestion === idQuestion);\n      if (!selectedQuestion || !selectedQuestion.options) {\n        console.error(`No options found for question with ID: ${idQuestion}`);\n        return [];\n      }\n      console.log(`Options for Question ID ${idQuestion}:`, selectedQuestion.options);\n      return selectedQuestion.options;\n    }\n    onOptionChange(idQuestion, IdOption) {\n      console.log(`Question ID: ${idQuestion}, Selected Option ID: ${IdOption}`);\n      const index = this.questions.findIndex(q => q.idQuestion === idQuestion);\n      if (index !== -1) {\n        this.selectedOptions[index] = IdOption;\n      }\n      console.log('Selected Options:', this.selectedOptions);\n    }\n    submitResponse() {\n      console.log('Final selected options before submission:', this.selectedOptions);\n      if (this.selectedOptions.some(option => option === undefined)) {\n        console.error('All options must be selected before submitting.');\n        alert('Please select an option for each question before submitting.');\n        return;\n      }\n      const responses = this.questions.map((question, index) => ({\n        question: {\n          idQuestion: question.idQuestion\n        },\n        option: {\n          IdOption: this.selectedOptions[index]\n        }\n      }));\n      // Collect all responses and submit them\n      const responseObservables = responses.map(response => this.reponseService.addResponse(response.question.idQuestion, response.option.IdOption, response));\n      // Use forkJoin to wait for all responses to complete\n      forkJoin(responseObservables).subscribe({\n        next: () => {\n          console.log('All responses saved');\n          this.router.navigate(['/Survey']);\n        },\n        error: err => console.error('Error saving responses:', err)\n      });\n    }\n    static #_ = this.ɵfac = function SondageDetailsComponent_Factory(t) {\n      return new (t || SondageDetailsComponent)(i0.ɵɵdirectiveInject(i1.QuestionService), i0.ɵɵdirectiveInject(i2.SondageService), i0.ɵɵdirectiveInject(i3.ReponseService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SondageDetailsComponent,\n      selectors: [[\"app-sondage-details\"]],\n      decls: 6,\n      vars: 1,\n      consts: [[1, \"wholepage\"], [1, \"navbar\", 2, \"background-color\", \"#495057\", \"color\", \"#f8f9fa\"], [1, \"container\"], [4, \"ngIf\"], [3, \"ngSubmit\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [\"class\", \"question-divider\", 4, \"ngIf\"], [\"type\", \"radio\", \"required\", \"\", 3, \"change\", \"id\", \"name\", \"value\"], [3, \"for\"], [1, \"question-divider\"]],\n      template: function SondageDetailsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"app-auth-navbar\", 1);\n          i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\", 2);\n          i0.ɵɵtemplate(4, SondageDetailsComponent_div_4_Template, 7, 2, \"div\", 3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(5, \"app-footer\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.sondage);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.NgForm, i7.FooterComponent, i8.AuthNavbarComponent],\n      styles: [\"html[_ngcontent-%COMP%], body[_ngcontent-%COMP%]{height:100%;margin:0;padding:0;background-color:#343a40;color:#f8f9fa;font-family:Roboto,sans-serif;box-sizing:border-box}.wholepage[_ngcontent-%COMP%]{background-color:#495057;color:#495057}.navbar[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100%;background-color:#495057!important;box-shadow:0 2px 4px #0000001a;z-index:1100;color:#495057!important}.wholepage[_ngcontent-%COMP%]   app-auth-navbar[_ngcontent-%COMP%]   .specific-class[_ngcontent-%COMP%]{background-color:#495057!important}.main-content[_ngcontent-%COMP%]{background-color:#343a40;min-height:100vh;display:flex;align-items:center;justify-content:center;padding-top:60px}body[_ngcontent-%COMP%], .container[_ngcontent-%COMP%]{background-color:#343a40;margin:0;color:#ecf0f1;min-height:100vh}.container[_ngcontent-%COMP%]{max-width:800px;background-color:#495057;border-radius:8px;align-items:center;justify-content:center;margin-left:300px;z-index:1100;display:flex;flex-wrap:wrap;gap:16px;padding:200px 30px 30px}h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%]{color:#f8f9fa}h2[_ngcontent-%COMP%]{font-size:24px;margin-bottom:20px}h3[_ngcontent-%COMP%]{font-size:22px;margin-bottom:15px}h4[_ngcontent-%COMP%]{font-size:18px;margin-top:20px;margin-bottom:10px}form[_ngcontent-%COMP%]{display:flex;flex-direction:column}.question-divider[_ngcontent-%COMP%]{margin-top:30px;border-bottom:1px solid #6c757d;margin-bottom:20px}input[type=radio][_ngcontent-%COMP%]{margin-right:12px;cursor:pointer;transform:scale(1.2)}label[_ngcontent-%COMP%]{font-size:16px;color:#f8f9fa;cursor:pointer}button[type=submit][_ngcontent-%COMP%]{background-color:#6c757d;color:#f8f9fa;border:none;padding:12px 24px;text-align:center;text-decoration:none;display:inline-block;font-size:16px;margin-top:30px;cursor:pointer;border-radius:4px;transition:background-color .3s ease}button[type=submit][_ngcontent-%COMP%]:hover{background-color:#495057}@media (max-width: 600px){.container[_ngcontent-%COMP%]{padding:15px}h2[_ngcontent-%COMP%], h3[_ngcontent-%COMP%], h4[_ngcontent-%COMP%]{font-size:20px}button[type=submit][_ngcontent-%COMP%]{padding:10px 20px;font-size:14px}}\"]\n    });\n  }\n  return SondageDetailsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}